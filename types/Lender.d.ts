/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import { TypedEventFilter, TypedEvent, TypedListener } from "./commons";

interface LenderInterface extends ethers.utils.Interface {
  functions: {
    "_actualColl()": FunctionFragment;
    "_actualDebt()": FunctionFragment;
    "_collateral()": FunctionFragment;
    "_ethusdOracle()": FunctionFragment;
    "_fee()": FunctionFragment;
    "_minDebt()": FunctionFragment;
    "_minPositionCollateralizationRatio()": FunctionFragment;
    "_minSystemCollateralizationRatio()": FunctionFragment;
    "_nusd()": FunctionFragment;
    "_openedColl()": FunctionFragment;
    "_openedDebt()": FunctionFragment;
    "_oraclePeriod()": FunctionFragment;
    "_oraclePool()": FunctionFragment;
    "_owner()": FunctionFragment;
    "_pendingOwner()": FunctionFragment;
    "_positions(address)": FunctionFragment;
    "acceptOwner()": FunctionFragment;
    "computePostion(uint256,uint256)": FunctionFragment;
    "liquidate(address,bytes)": FunctionFragment;
    "observe()": FunctionFragment;
    "owner()": FunctionFragment;
    "positionOf(address)": FunctionFragment;
    "setFee(uint256)": FunctionFragment;
    "setMinDebt(uint256)": FunctionFragment;
    "setMinPositionCollateralizationRatio(uint256)": FunctionFragment;
    "setMinSystemCollateralizationRatio(uint256)": FunctionFragment;
    "setOracle(address)": FunctionFragment;
    "setOraclePeriod(uint32)": FunctionFragment;
    "setOwner(address)": FunctionFragment;
    "totalCollateralizationRatio(uint256)": FunctionFragment;
    "uniswapV3Factory()": FunctionFragment;
    "update(int256,int256)": FunctionFragment;
    "wethAddress()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "_actualColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_actualDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_collateral",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_ethusdOracle",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_fee", values?: undefined): string;
  encodeFunctionData(functionFragment: "_minDebt", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_minPositionCollateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_minSystemCollateralizationRatio",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_nusd", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_openedColl",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_openedDebt",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_oraclePeriod",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "_oraclePool",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "_pendingOwner",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "_positions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "acceptOwner",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "computePostion",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidate",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "observe", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "positionOf", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setFee",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinDebt",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinPositionCollateralizationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setMinSystemCollateralizationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOracle", values: [string]): string;
  encodeFunctionData(
    functionFragment: "setOraclePeriod",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "setOwner", values: [string]): string;
  encodeFunctionData(
    functionFragment: "totalCollateralizationRatio",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "uniswapV3Factory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "update",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "wethAddress",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "_actualColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_actualDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_collateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_ethusdOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_fee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "_minDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_minPositionCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_minSystemCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_nusd", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_openedColl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_openedDebt",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_oraclePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "_oraclePool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "_pendingOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "_positions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "acceptOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "computePostion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "liquidate", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "observe", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "positionOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setMinDebt", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setMinPositionCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMinSystemCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOracle", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setOraclePeriod",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalCollateralizationRatio",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "uniswapV3Factory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "update", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "wethAddress",
    data: BytesLike
  ): Result;

  events: {
    "Liquidate(address,address)": EventFragment;
    "Update(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Liquidate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Update"): EventFragment;
}

export class Lender extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LenderInterface;

  functions: {
    _actualColl(overrides?: CallOverrides): Promise<[BigNumber]>;

    _actualDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    _collateral(overrides?: CallOverrides): Promise<[string]>;

    _ethusdOracle(overrides?: CallOverrides): Promise<[string]>;

    _fee(overrides?: CallOverrides): Promise<[BigNumber]>;

    _minDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    _minPositionCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _minSystemCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    _nusd(overrides?: CallOverrides): Promise<[string]>;

    _openedColl(overrides?: CallOverrides): Promise<[BigNumber]>;

    _openedDebt(overrides?: CallOverrides): Promise<[BigNumber]>;

    _oraclePeriod(overrides?: CallOverrides): Promise<[number]>;

    _oraclePool(overrides?: CallOverrides): Promise<[string]>;

    _owner(overrides?: CallOverrides): Promise<[string]>;

    _pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    _positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        coll: BigNumber;
        value: BigNumber;
        debt: BigNumber;
        ratio: BigNumber;
      }
    >;

    acceptOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    computePostion(
      coll: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          coll: BigNumber;
          value: BigNumber;
          debt: BigNumber;
          ratio: BigNumber;
        }
      ]
    >;

    liquidate(
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    observe(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    positionOf(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [
        [BigNumber, BigNumber, BigNumber, BigNumber] & {
          coll: BigNumber;
          value: BigNumber;
          debt: BigNumber;
          ratio: BigNumber;
        }
      ]
    >;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinDebt(
      minDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinPositionCollateralizationRatio(
      minPositionCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMinSystemCollateralizationRatio(
      minSystemCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOraclePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    totalCollateralizationRatio(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<[string]>;

    update(
      collDelta: BigNumberish,
      debtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<[string]>;
  };

  _actualColl(overrides?: CallOverrides): Promise<BigNumber>;

  _actualDebt(overrides?: CallOverrides): Promise<BigNumber>;

  _collateral(overrides?: CallOverrides): Promise<string>;

  _ethusdOracle(overrides?: CallOverrides): Promise<string>;

  _fee(overrides?: CallOverrides): Promise<BigNumber>;

  _minDebt(overrides?: CallOverrides): Promise<BigNumber>;

  _minPositionCollateralizationRatio(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _minSystemCollateralizationRatio(
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  _nusd(overrides?: CallOverrides): Promise<string>;

  _openedColl(overrides?: CallOverrides): Promise<BigNumber>;

  _openedDebt(overrides?: CallOverrides): Promise<BigNumber>;

  _oraclePeriod(overrides?: CallOverrides): Promise<number>;

  _oraclePool(overrides?: CallOverrides): Promise<string>;

  _owner(overrides?: CallOverrides): Promise<string>;

  _pendingOwner(overrides?: CallOverrides): Promise<string>;

  _positions(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      coll: BigNumber;
      value: BigNumber;
      debt: BigNumber;
      ratio: BigNumber;
    }
  >;

  acceptOwner(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  computePostion(
    coll: BigNumberish,
    debt: BigNumberish,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      coll: BigNumber;
      value: BigNumber;
      debt: BigNumber;
      ratio: BigNumber;
    }
  >;

  liquidate(
    owner: string,
    data: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  observe(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  positionOf(
    holder: string,
    overrides?: CallOverrides
  ): Promise<
    [BigNumber, BigNumber, BigNumber, BigNumber] & {
      coll: BigNumber;
      value: BigNumber;
      debt: BigNumber;
      ratio: BigNumber;
    }
  >;

  setFee(
    fee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinDebt(
    minDebt: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinPositionCollateralizationRatio(
    minPositionCollateralizationRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMinSystemCollateralizationRatio(
    minSystemCollateralizationRatio: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOracle(
    oracle: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOraclePeriod(
    period: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setOwner(
    owner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  totalCollateralizationRatio(
    price: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

  update(
    collDelta: BigNumberish,
    debtDelta: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wethAddress(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    _actualColl(overrides?: CallOverrides): Promise<BigNumber>;

    _actualDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _collateral(overrides?: CallOverrides): Promise<string>;

    _ethusdOracle(overrides?: CallOverrides): Promise<string>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _minPositionCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _minSystemCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _nusd(overrides?: CallOverrides): Promise<string>;

    _openedColl(overrides?: CallOverrides): Promise<BigNumber>;

    _openedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _oraclePeriod(overrides?: CallOverrides): Promise<number>;

    _oraclePool(overrides?: CallOverrides): Promise<string>;

    _owner(overrides?: CallOverrides): Promise<string>;

    _pendingOwner(overrides?: CallOverrides): Promise<string>;

    _positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        coll: BigNumber;
        value: BigNumber;
        debt: BigNumber;
        ratio: BigNumber;
      }
    >;

    acceptOwner(overrides?: CallOverrides): Promise<void>;

    computePostion(
      coll: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        coll: BigNumber;
        value: BigNumber;
        debt: BigNumber;
        ratio: BigNumber;
      }
    >;

    liquidate(
      owner: string,
      data: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    observe(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    positionOf(
      holder: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        coll: BigNumber;
        value: BigNumber;
        debt: BigNumber;
        ratio: BigNumber;
      }
    >;

    setFee(fee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinDebt(minDebt: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setMinPositionCollateralizationRatio(
      minPositionCollateralizationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setMinSystemCollateralizationRatio(
      minSystemCollateralizationRatio: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOracle(oracle: string, overrides?: CallOverrides): Promise<void>;

    setOraclePeriod(
      period: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    setOwner(owner: string, overrides?: CallOverrides): Promise<void>;

    totalCollateralizationRatio(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<string>;

    update(
      collDelta: BigNumberish,
      debtDelta: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber, BigNumber, BigNumber] & {
        coll: BigNumber;
        value: BigNumber;
        debt: BigNumber;
        ratio: BigNumber;
      }
    >;

    wethAddress(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    Liquidate(
      owner?: string | null,
      liquidator?: null
    ): TypedEventFilter<
      [string, string],
      { owner: string; liquidator: string }
    >;

    Update(
      owner?: string | null,
      coll?: null,
      debt?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { owner: string; coll: BigNumber; debt: BigNumber }
    >;
  };

  estimateGas: {
    _actualColl(overrides?: CallOverrides): Promise<BigNumber>;

    _actualDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _collateral(overrides?: CallOverrides): Promise<BigNumber>;

    _ethusdOracle(overrides?: CallOverrides): Promise<BigNumber>;

    _fee(overrides?: CallOverrides): Promise<BigNumber>;

    _minDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _minPositionCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _minSystemCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    _nusd(overrides?: CallOverrides): Promise<BigNumber>;

    _openedColl(overrides?: CallOverrides): Promise<BigNumber>;

    _openedDebt(overrides?: CallOverrides): Promise<BigNumber>;

    _oraclePeriod(overrides?: CallOverrides): Promise<BigNumber>;

    _oraclePool(overrides?: CallOverrides): Promise<BigNumber>;

    _owner(overrides?: CallOverrides): Promise<BigNumber>;

    _pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    _positions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    acceptOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    computePostion(
      coll: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    liquidate(
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    observe(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    positionOf(holder: string, overrides?: CallOverrides): Promise<BigNumber>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinDebt(
      minDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinPositionCollateralizationRatio(
      minPositionCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMinSystemCollateralizationRatio(
      minSystemCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOraclePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    totalCollateralizationRatio(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<BigNumber>;

    update(
      collDelta: BigNumberish,
      debtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wethAddress(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    _actualColl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _actualDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _collateral(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _ethusdOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _fee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _minDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _minPositionCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _minSystemCollateralizationRatio(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    _nusd(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _openedColl(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _openedDebt(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _oraclePeriod(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _oraclePool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    _positions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    acceptOwner(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    computePostion(
      coll: BigNumberish,
      debt: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    liquidate(
      owner: string,
      data: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    observe(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    positionOf(
      holder: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setFee(
      fee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinDebt(
      minDebt: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinPositionCollateralizationRatio(
      minPositionCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMinSystemCollateralizationRatio(
      minSystemCollateralizationRatio: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOracle(
      oracle: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOraclePeriod(
      period: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setOwner(
      owner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    totalCollateralizationRatio(
      price: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    uniswapV3Factory(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    update(
      collDelta: BigNumberish,
      debtDelta: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wethAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
