/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MockObservable,
  MockObservableInterface,
} from "../MockObservable";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "uint32[]",
        name: "secondsAgos",
        type: "uint32[]",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "int56[]",
        name: "tickCumulatives",
        type: "int56[]",
      },
      {
        internalType: "uint160[]",
        name: "secondsPerLiquidityCumulativeX128s",
        type: "uint160[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516107483803806107488339818101604052606081101561003357600080fd5b810190808051604051939291908464010000000082111561005357600080fd5b90830190602082018581111561006857600080fd5b825186602082028301116401000000008211171561008557600080fd5b82525081516020918201928201910280838360005b838110156100b257818101518382015260200161009a565b50505050905001604052602001805160405193929190846401000000008211156100db57600080fd5b9083019060208201858111156100f057600080fd5b825186602082028301116401000000008211171561010d57600080fd5b82525081516020918201928201910280838360005b8381101561013a578181015183820152602001610122565b505050509050016040526020018051604051939291908464010000000082111561016357600080fd5b90830190602082018581111561017857600080fd5b825186602082028301116401000000008211171561019557600080fd5b82525081516020918201928201910280838360005b838110156101c25781810151838201526020016101aa565b50505050905001604052505050825160021480156101e1575081516002145b80156101ee575080516002145b61023f576040805162461bcd60e51b815260206004820152601660248201527f496e76616c6964207465737420636173652073697a6500000000000000000000604482015290519081900360640190fd5b60405180606001604052808460008151811061025757fe5b602002602001015163ffffffff1681526020018360008151811061027757fe5b602002602001015160060b81526020018260008151811061029457fe5b6020908102919091018101516001600160a01b03908116909252825160008054928501516040958601519094166b01000000000000000000000002600160581b600160f81b031960069590950b66ffffffffffffff166401000000000266ffffffffffffff60201b1963ffffffff90941663ffffffff1990951694909417929092169290921792909216919091179055805160608101909152835181908590600190811061033e57fe5b602002602001015163ffffffff1681526020018360018151811061035e57fe5b602002602001015160060b81526020018260018151811061037b57fe5b6020908102919091018101516001600160a01b03908116909252825160018054928501516040909501519093166b01000000000000000000000002600160581b600160f81b031960069590950b66ffffffffffffff166401000000000266ffffffffffffff60201b1963ffffffff90931663ffffffff199094169390931791909116919091179290921691909117905550505061032b8061041d6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063883bdbfd14610030575b600080fd5b61009e6004803603602081101561004657600080fd5b810190602081018135600160201b81111561006057600080fd5b82018360208201111561007257600080fd5b803590602001918460208302840111600160201b8311171561009357600080fd5b509092509050610137565b604051808060200180602001838103835285818151815260200191508051906020019060200280838360005b838110156100e25781810151838201526020016100ca565b50505050905001838103825284818151815260200191508051906020019060200280838360005b83811015610121578181015183820152602001610109565b5050505090500194505050505060405180910390f35b60008054606091829163ffffffff1690859085908161015257fe5b9050602002013563ffffffff1663ffffffff1614801561019a57506001805463ffffffff16908590859081811061018557fe5b9050602002013563ffffffff1663ffffffff16145b6101df576040805162461bcd60e51b8152602060048201526011602482015270496e76616c69642074657374206361736560781b604482015290519081900360640190fd5b6040805160028082526060820183526000926020830190803683375050600080548351939450600160201b900460060b9284925061021957fe5b600692830b830b6020918202929092010152600180548351600160201b90910490920b91839190811061024857fe5b600692830b90920b60209283029190910182015260408051600280825260608201835260009391929091830190803683375050600080548351939450600160581b90046001600160a01b03169284925061029e57fe5b6001600160a01b039283166020918202929092010152600180548351600160581b9091049092169183919081106102d157fe5b6001600160a01b03909216602092830291909101909101529092509050925092905056fea26469706673582212205d8249179ffd86467c6126d7e83df4423ef42d44b44b5fdab40c277846cb065264736f6c63430007060033";

export class MockObservable__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    secondsAgos: BigNumberish[],
    tickCumulatives: BigNumberish[],
    secondsPerLiquidityCumulativeX128s: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockObservable> {
    return super.deploy(
      secondsAgos,
      tickCumulatives,
      secondsPerLiquidityCumulativeX128s,
      overrides || {}
    ) as Promise<MockObservable>;
  }
  getDeployTransaction(
    secondsAgos: BigNumberish[],
    tickCumulatives: BigNumberish[],
    secondsPerLiquidityCumulativeX128s: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      secondsAgos,
      tickCumulatives,
      secondsPerLiquidityCumulativeX128s,
      overrides || {}
    );
  }
  attach(address: string): MockObservable {
    return super.attach(address) as MockObservable;
  }
  connect(signer: Signer): MockObservable__factory {
    return super.connect(signer) as MockObservable__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockObservableInterface {
    return new utils.Interface(_abi) as MockObservableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockObservable {
    return new Contract(address, _abi, signerOrProvider) as MockObservable;
  }
}
