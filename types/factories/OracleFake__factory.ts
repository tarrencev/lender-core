/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { OracleFake, OracleFakeInterface } from "../OracleFake";

const _abi = [
  {
    inputs: [],
    name: "_price",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    name: "observe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "price",
        type: "uint256",
      },
    ],
    name: "set",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060dd8061001f6000396000f3fe6080604052348015600f57600080fd5b5060043610603c5760003560e01c8063115f3ad1146041578063235b6ea114607357806360fe47b1146079575b600080fd5b606160048036036020811015605557600080fd5b503563ffffffff166095565b60408051918252519081900360200190f35b6061609c565b609360048036036020811015608d57600080fd5b503560a2565b005b5060005490565b60005481565b60005556fea264697066735822122097166264662baaf93b038330d9d0d11b24fc39c420a6724a40c7126ea4fd011564736f6c63430007060033";

export class OracleFake__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<OracleFake> {
    return super.deploy(overrides || {}) as Promise<OracleFake>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): OracleFake {
    return super.attach(address) as OracleFake;
  }
  connect(signer: Signer): OracleFake__factory {
    return super.connect(signer) as OracleFake__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleFakeInterface {
    return new utils.Interface(_abi) as OracleFakeInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): OracleFake {
    return new Contract(address, _abi, signerOrProvider) as OracleFake;
  }
}
