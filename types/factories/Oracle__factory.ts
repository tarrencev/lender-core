/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Oracle, OracleInterface } from "../Oracle";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "token",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "_owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_pendingOwner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_period",
    outputs: [
      {
        internalType: "uint32",
        name: "",
        type: "uint32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "_token",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "acceptOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "observe",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "setOwner",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint32",
        name: "period",
        type: "uint32",
      },
    ],
    name: "setPeriod",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "uniswapV3Factory",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "usdcAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "wethAddress",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805463ffffffff60a01b1916600160a01b17905534801561002657600080fd5b50604051610e8e380380610e8e8339818101604052604081101561004957600080fd5b508051602090910151600080546001600160a01b039384166001600160a01b03199182161790915560028054939092169216919091179055610dfe806100906000396000f3fe608060405234801561001057600080fd5b50600436106100b45760003560e01c80638da5cb5b116100715780638da5cb5b14610150578063b2bdfa7b14610158578063b8ec2d3814610160578063d3b8375814610183578063ebbc49651461018b578063ecd0c0c314610193576100b4565b806302d45457146100b957806313af4035146100dd57806314fc78fc146101055780634630f02e1461011f5780634f0e0ef3146101405780635b54918214610148575b600080fd5b6100c161019b565b604080516001600160a01b039092168252519081900360200190f35b610103600480360360208110156100f357600080fd5b50356001600160a01b03166101b3565b005b61010d61021c565b60408051918252519081900360200190f35b610127610350565b6040805163ffffffff9092168252519081900360200190f35b6100c1610363565b6100c161037b565b6100c1610393565b6100c16103a2565b6101036004803603602081101561017657600080fd5b503563ffffffff166103b1565b6100c161041e565b61010361042d565b6100c161048f565b73a0b86991c6218b36c1d19d4a2e9eb0ce3606eb4881565b6000546001600160a01b031633146101fa576040805162461bcd60e51b815260206004820152600560248201526437bbb732b960d91b604482015290519081900360640190fd5b600180546001600160a01b0319166001600160a01b0392909216919091179055565b60025460009081906102869061027190731f98431c8ad98523631ae4a59f267346ea31f9849061026c906001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26101f461049e565b610500565b600154600160a01b900463ffffffff166105e4565b6002549091506000906102c2908390670de0b6b3a7640000906001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26108e0565b9050610314610271731f98431c8ad98523631ae4a59f267346ea31f98461026c73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc273a0b86991c6218b36c1d19d4a2e9eb0ce3606eb48610bb861049e565b60025490925060009061034890849084906001600160a01b031673c02aaa39b223fe8d0a0e5c4f27ead9083c756cc26108e0565b935050505090565b600154600160a01b900463ffffffff1681565b73c02aaa39b223fe8d0a0e5c4f27ead9083c756cc281565b731f98431c8ad98523631ae4a59f267346ea31f98481565b6000546001600160a01b031690565b6000546001600160a01b031681565b6000546001600160a01b031633146103f8576040805162461bcd60e51b815260206004820152600560248201526437bbb732b960d91b604482015290519081900360640190fd5b6001805463ffffffff909216600160a01b0263ffffffff60a01b19909216919091179055565b6001546001600160a01b031681565b6001546001600160a01b0316331461047b576040805162461bcd60e51b815260206004820152600c60248201526b3832b73234b733a7bbb732b960a11b604482015290519081900360640190fd5b600080546001600160a01b03191633179055565b6002546001600160a01b031681565b6104a6610da8565b826001600160a01b0316846001600160a01b031611156104c4579192915b6040518060600160405280856001600160a01b03168152602001846001600160a01b031681526020018362ffffff1681525090505b9392505050565b600081602001516001600160a01b031682600001516001600160a01b03161061052857600080fd5b50805160208083015160409384015184516001600160a01b0394851681850152939091168385015262ffffff166060808401919091528351808403820181526080840185528051908301206001600160f81b031960a085015294901b6bffffffffffffffffffffffff191660a183015260b58201939093527fe34f199b19b2b4f47f68442619d555527d244f78a3297ea89325f843f87b8b5460d5808301919091528251808303909101815260f5909101909152805191012090565b600063ffffffff8216610623576040805162461bcd60e51b8152602060048201526002602482015261042560f41b604482015290519081900360640190fd5b604080516002808252606082018352600092602083019080368337019050509050828160008151811061065257fe5b602002602001019063ffffffff16908163ffffffff168152505060008160018151811061067b57fe5b63ffffffff90921660209283029190910182015260405163883bdbfd60e01b8152600481018281528351602483015283516000936001600160a01b0389169363883bdbfd938793909283926044019185820191028083838b5b838110156106ec5781810151838201526020016106d4565b505050509050019250505060006040518083038186803b15801561070f57600080fd5b505afa158015610723573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604090815281101561074c57600080fd5b8101908080516040519392919084600160201b82111561076b57600080fd5b90830190602082018581111561078057600080fd5b82518660208202830111600160201b8211171561079c57600080fd5b82525081516020918201928201910280838360005b838110156107c95781810151838201526020016107b1565b5050505090500160405260200180516040519392919084600160201b8211156107f157600080fd5b90830190602082018581111561080657600080fd5b82518660208202830111600160201b8211171561082257600080fd5b82525081516020918201928201910280838360005b8381101561084f578181015183820152602001610837565b5050505090500160405250505050905060008160008151811061086e57fe5b60200260200101518260018151811061088357fe5b60200260200101510390508463ffffffff168160060b816108a057fe5b05935060008160060b1280156108ca57508463ffffffff168160060b816108c357fe5b0760060b15155b156108d757600019909301925b50505092915050565b6000806108ec866109d2565b90506001600160801b036001600160a01b0382161161095b576001600160a01b038082168002908481169086161061093b57610936600160c01b876001600160801b031683610cf9565b610953565b61095381876001600160801b0316600160c01b610cf9565b9250506109c9565b60006109756001600160a01b03831680600160401b610cf9565b9050836001600160a01b0316856001600160a01b0316106109ad576109a8600160801b876001600160801b031683610cf9565b6109c5565b6109c581876001600160801b0316600160801b610cf9565b9250505b50949350505050565b60008060008360020b126109e9578260020b6109f1565b8260020b6000035b9050620d89e8811115610a2f576040805162461bcd60e51b81526020600482015260016024820152601560fa1b604482015290519081900360640190fd5b600060018216610a4357600160801b610a55565b6ffffcb933bd6fad37aa2d162d1a5940015b6001600160881b031690506002821615610a7f576ffff97272373d413259a46990580e213a0260801c5b6004821615610a9e576ffff2e50f5f656932ef12357cf3c7fdcc0260801c5b6008821615610abd576fffe5caca7e10e4e61c3624eaa0941cd00260801c5b6010821615610adc576fffcb9843d60f6159c9db58835c9266440260801c5b6020821615610afb576fff973b41fa98c081472e6896dfb254c00260801c5b6040821615610b1a576fff2ea16466c96a3843ec78b326b528610260801c5b6080821615610b39576ffe5dee046a99a2a811c461f1969c30530260801c5b610100821615610b59576ffcbe86c7900a88aedcffc83b479aa3a40260801c5b610200821615610b79576ff987a7253ac413176f2b074cf7815e540260801c5b610400821615610b99576ff3392b0822b70005940c7a398e4b70f30260801c5b610800821615610bb9576fe7159475a2c29b7443b29c7fa6e889d90260801c5b611000821615610bd9576fd097f3bdfd2022b8845ad8f792aa58250260801c5b612000821615610bf9576fa9f746462d870fdf8a65dc1f90e061e50260801c5b614000821615610c19576f70d869a156d2a1b890bb3df62baf32f70260801c5b618000821615610c39576f31be135f97d08fd981231505542fcfa60260801c5b62010000821615610c5a576f09aa508b5b7a84e1c677de54f3e99bc90260801c5b62020000821615610c7a576e5d6af8dedb81196699c329225ee6040260801c5b62040000821615610c99576d2216e584f5fa1ea926041bedfe980260801c5b62080000821615610cb6576b048a170391f7dc42444e8fa20260801c5b60008460020b1315610cd1578060001981610ccd57fe5b0490505b600160201b810615610ce4576001610ce7565b60005b60ff16602082901c0192505050919050565b6000808060001985870986860292508281109083900303905080610d2f5760008411610d2457600080fd5b5082900490506104f9565b808411610d3b57600080fd5b6000848688096000868103871696879004966002600389028118808a02820302808a02820302808a02820302808a02820302808a02820302808a02909103029181900381900460010186841190950394909402919094039290920491909117919091029150509392505050565b60408051606081018252600080825260208201819052918101919091529056fea2646970667358221220e17ef9d28fda4345b4fa28460cfd940a482989341f4a1adaf607a988f2ed8bc764736f6c63430007060033";

export class Oracle__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    owner: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Oracle> {
    return super.deploy(owner, token, overrides || {}) as Promise<Oracle>;
  }
  getDeployTransaction(
    owner: string,
    token: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(owner, token, overrides || {});
  }
  attach(address: string): Oracle {
    return super.attach(address) as Oracle;
  }
  connect(signer: Signer): Oracle__factory {
    return super.connect(signer) as Oracle__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): OracleInterface {
    return new utils.Interface(_abi) as OracleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Oracle {
    return new Contract(address, _abi, signerOrProvider) as Oracle;
  }
}
